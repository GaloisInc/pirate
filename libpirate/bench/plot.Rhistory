library(reshape)
library(ggplot2)
library(scales)
library(gridExtra)

datanames <- c('small', 'medium', 'large')
dataminvec <- c(0, 8, 16)
datamaxvec <- c(7, 15, 20)

cbp <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

scenarios <- c('shmem', 'uio', 'process-vm-device', 'unix-pipe', 'unix-socket', 'tcp-socket', 'udp-socket', 'shmem-udp')

throughput <- read.csv('throughput.results', sep=" ", header=FALSE)
names(throughput) <- c('scenario', 'size', 'MB/s')
throughput <- throughput[throughput$scenario != 'fuse-unix-pipe',]
mt <- melt(throughput, id=c('scenario', 'size'))
mt$scenario <- factor(mt$scenario, level=scenarios)
agg <- aggregate(mt[,'value'], list(mt$size, mt$scenario), mean)
names(agg) <- c('size', 'scenario', 'MB/s')
agg <- reshape(agg, dir="wide", timevar="scenario", idvar="size")
colnames(agg) <- c('message size', scenarios)
pdf("channel-throughput-table.pdf", height=8.5, width=11)
grid.table(format(agg, digits=2, scientific=FALSE, big.mark=","), rows=NULL)
dev.off()

latency <- read.csv('latency.results', sep=" ", header=FALSE)
names(latency) <- c('scenario', 'size', 'time')
latency <- latency[latency$scenario != 'fuse-unix-pipe',]
latency[,'time'] <- latency[,'time'] / 1000.0
mt <- melt(latency, id=c('scenario', 'size'))
mt$scenario <- factor(mt$scenario, level=scenarios)

agg <- aggregate(mt[,'value'], list(mt$size, mt$scenario), mean)
names(agg) <- c('size', 'scenario', 'time')
agg <- reshape(agg, dir="wide", timevar="scenario", idvar="size")
colnames(agg) <- c('message size', scenarios)
pdf("channel-latency-table.pdf", height=8.5, width=11)
grid.table(format(agg, digits=2, scientific=FALSE, big.mark=","), rows=NULL)
dev.off()

scenarios_readv <- c('unix-pipe', 'unix-socket', 'udp-socket', 'tcp-socket')

throughput <- read.csv('throughput.vector.results', sep=" ", header=FALSE)
names(throughput) <- c('scenario', 'size', 'MB/s')
throughput <- throughput[throughput$scenario != 'fuse-unix-pipe',]
mt <- melt(throughput, id=c('scenario', 'size'))
mt$scenario <- factor(mt$scenario, level=scenarios_readv)

agg <- aggregate(mt[,'value'], list(mt$size, mt$scenario), mean)
names(agg) <- c('size', 'scenario', 'MB/s')
agg <- reshape(agg, dir="wide", timevar="scenario", idvar="size")
colnames(agg) <- c('message size', scenarios_readv)
pdf("channel-throughput-readv-table.pdf", height=8.5, width=11)
grid.table(format(agg, digits=2, scientific=FALSE, big.mark=","), rows=NULL)
dev.off()

ybreaks <- 2^(-2:20)

for (idx in c(1,2,3)) {
    datamin <- 2^dataminvec[idx]
    datamax <- 2^datamaxvec[idx]
    dataname <- datanames[idx]

    throughput <- read.csv('throughput.results', sep=" ", header=FALSE)
    names(throughput) <- c('scenario', 'size', 'MB/s')
    throughput <- throughput[throughput$scenario != 'fuse-unix-pipe',]
    throughput <- throughput[throughput$size >= datamin & throughput$size <= datamax,]
    mt <- melt(throughput, id=c('scenario', 'size'))
    mt$scenario <- factor(mt$scenario, level=scenarios)

    agg <- aggregate(mt[,'value'], list(mt$size, mt$scenario), mean)
    names(agg) <- c('size', 'scenario', 'value')
    g <- ggplot(agg, aes(size, value, color = scenario)) + scale_colour_manual(values=cbp) + geom_point(size=3, position=position_dodge(0.05)) + geom_line(size=1, position=position_dodge(0.05)) + scale_x_continuous(trans='log2', minor_breaks=NULL, breaks=2^(c(0:20)), labels=parse(text=paste("2^",c(0:20),sep=""))) + scale_y_continuous(trans='log2', breaks=ybreaks, labels=formatC(ybreaks, big.mark=",",digits=10)) + ggtitle("Interprocess Communication Throughput (log-log graph)") + xlab("Message Size (bytes)") + ylab("Throughput (MB/s)") + theme(text = element_text(size=12), axis.text=element_text(size=12), legend.text=element_text(size=12))
    pdf(paste("channel-throughput", dataname, "plot.pdf", sep="-"))
    print(g)
    dev.off()

    latency <- read.csv('latency.results', sep=" ", header=FALSE)
    names(latency) <- c('scenario', 'size', 'time')
    latency <- latency[latency$scenario != 'fuse-unix-pipe',]
    latency <- latency[latency$size >= datamin & latency$size <= datamax,]
    latency[,'time'] <- latency[,'time'] / 1000.0
    mt <- melt(latency, id=c('scenario', 'size'))
    mt$scenario <- factor(mt$scenario, level=scenarios)

    agg <- aggregate(mt[,'value'], list(mt$size, mt$scenario), mean)
    names(agg) <- c('size', 'scenario', 'value')
    g <- ggplot(agg, aes(size, value, color = scenario)) + geom_point(size=3) + geom_line(size=1) + scale_x_continuous(trans='log2', minor_breaks=NULL, breaks=2^(c(0:20)), labels=parse(text=paste("2^",c(0:20),sep=""))) + scale_y_continuous(trans='log2', breaks=ybreaks, labels=formatC(ybreaks, big.mark=",",digits=10)) + ggtitle("Interprocess Communication Latency (log-log graph)") + xlab("Message Size (bytes)") + ylab(expression(paste("Latency (", mu, "s)", sep=""))) + theme(text = element_text(size=12), axis.text=element_text(size=12), legend.text=element_text(size=12))
    pdf(paste("channel-latency", dataname, "plot.pdf", sep="-"))
    print(g)
    dev.off()
}
