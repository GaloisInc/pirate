Building Enclaves
^^^^^^^^^^^^^^^^^

[Note: This documentation is still under development, and highly subject to change.]

After compiling one or more C source files into object files using
enclave-aware compilers, one can generate an executable that runs the
enclaves by running passing ``--enclave name`` to ``lld``
along with other linker options and object files.  This will result in
`lld` producing an executable that establishes the communication
channels and launches each of the enclave main function at startup.
This capability is intended for testing purposes, and does not
provide physical security protections between enclaves.  A version
of ``lld`` with these protection guarantees will be developed once
suitable hardware is available.

If ``lld`` does not find the main function for one of the enclaves,
then an error will be reported.

Building LLVM
---------------

Assumed tools: `git`, `cmake`, `ninja`, C compiler

.. code-block:: sh

    # Remeber the top directory
    $ TOP=$PWD

    # clone the repository
    $ git clone git@github.com:GaloisInc/pirate-llvm

    # make a build directory and build
    $ mkdir llvm-build
    $ cd llvm-build
    $ cmake \
       -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \
       -DLLVM_ENABLE_PROJECTS=clang\;lld\;lldb \
       -DCMAKE_BUILD_TYPE=Release \
       -DCMAKE_C_FLAGS=-ffunction-sections\ -fdata-sections \
       -DCMAKE_CXX_FLAGS=-ffunction-sections\ -fdata-sections \
       -DLLVM_BUILD_TOOLS=Off \
       -DLLVM_CCACHE_BUILD=On \
       -DLLVM_DISTRIBUTION_COMPONENTS=clang\;clang-libraries\;clang-resource-headers\;lld\;lldb\;liblldb \
       -DLLVM_INCLUDE_EXAMPLES=Off \
       -DLLVM_INSTALL_TOOLCHAIN_ONLY=On \
       -DLLVM_TARGETS_TO_BUILD=X86\;AArch64\;ARM \
       -DLLVM_USE_LINKER=lld \
       ../pirate-llvm/llvm
    $ make

    # leave build directory
    $ cd $TOP
    
    # Build demos
    $ git clone git@github.com:GaloisInc/pirate-demos
    $ mkdir build
    $ cd build
    $ cmake \
        -DGAPS_DEMOS=On \
        -DCMAKE_C_COMPILER=$TOP/llvm-build/bin/clang \
        -DCMAKE_CXX_COMPILER=$TOP/llvm-build/bin/clang++ \
        ..
    $ make

    # build a trivial example (source below)
    $ llvm-build/bin/clang --target=x86_64-pc-linux-elf -c enclave.c

    # see that the example worked
    $ llvm-build/bin/llvm-readobj --gaps-info enclave.o

    # link the example to produce an executable for each enclave
    $ llvm-build/bin/clang enclave.o -o enclave_alpha -Xlinker -enclave -Xlinker alpha
    $ llvm-build/bin/clang enclave.o -o enclave_beta  -Xlinker -enclave -Xlinker beta

Trivial Example: `enclave.c`
----------------------------

.. code-block:: c

    #include <stdio.h>

    #pragma pirate capability declare(red)
    #pragma pirate enclave declare(alpha)
    #pragma pirate enclave declare(beta)
    #pragma pirate enclave capability(alpha, red)

    void onalpha(void)
      __attribute__((pirate_enclave_only("alpha")))
      __attribute__((pirate_capability("red")))
    {
            printf("running on alpha\n");
    }

    void
    alphamain(void)
      __attribute__((pirate_enclave_main("alpha")))
    {
            onalpha();
            printf("alpha started\n");
    }

    void
    betamain(void)
      __attribute__((pirate_enclave_main("beta")))
    {
            printf("beta started\n");
    }

Configuring Cmake
-----------------

To build a project with PIRATE LLVM specify the compile with `CC` and `CXX` environment
variables as seen above.

Different enclaves can be generated by adding specific `link_options` as seen below.

.. code-block::

    cmake_minimum_required(VERSION 3.13)
    project(example)
    
    add_executable(alpha enclave.c)
    target_link_options(alpha PRIVATE -fuse-ld=lld -Wl,-enclave,alpha)
    
    add_executable(beta enclave.c)
    target_link_options(alpha PRIVATE -fuse-ld=lld -Wl,-enclave,beta)


The `-fuse-ld=lld` argument ensures that the PIRATE version of the LLVM linker will be used
to link the executable. This version has been updated to handle the annotations.

The `-Wl,-enclave,NAME` argument instructs the linker to select the code from the project
corresponding to the desired enclave.


