Building Enclaves
^^^^^^^^^^^^^^^^^

[Note: This documentation is still under development, and highly subject to change.]

After compiling one or more C source files into object files using
enclave-aware compilers, one can generate an executable that runs the
enclaves by passing ``--enclave name`` to ``lld``
along with other linker options and object files.  This will result in
``lld`` producing an executable that establishes the communication
channels and launches each of the enclave main functions at startup.
This capability is intended for testing purposes, and does not
provide physical security protections between enclaves.  A version
of ``lld`` with these protection guarantees will be developed once
suitable hardware is available.

If ``lld`` does not find the main function for one of the enclaves,
then an error will be reported.

Building LLVM
--------------

**Requirements**

LLVM has many software and hardware requirements. They can be found at
https://llvm.org/docs/GettingStarted.html. In addition to these requirements,
we require the following packages: ``ccache swig``.

They can be installed on Ubuntu using the following command:

.. code-block:: sh

    $ sudo apt install ccache swig

**Compile LLVM**

.. code-block:: sh

    # clone the repository
    $ git clone git@github.com:GaloisInc/pirate-llvm

    # make a build directory and build
    $ mkdir llvm-build
    $ cd llvm-build
    $ cmake \
       -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \
       -DLLVM_ENABLE_PROJECTS=clang\;lld\;lldb \
       -DCMAKE_BUILD_TYPE=Release \
       -DLLVM_BUILD_TOOLS=Off \
       -DLLVM_CCACHE_BUILD=On \
       -DLLVM_DISTRIBUTION_COMPONENTS=clang\;clang-libraries\;clang-resource-headers\;lld\;lldb\;liblldb \
       -DLLVM_INCLUDE_EXAMPLES=Off \
       -DLLVM_INSTALL_TOOLCHAIN_ONLY=On \
       -DLLVM_TARGETS_TO_BUILD=X86\;AArch64\;ARM \
       ../pirate-llvm/llvm
    $ make

**Test the PIRATE LLVM toolchain**

.. code-block:: sh

    # build a trivial example (source below)
    $ llvm-build/bin/clang -ffunction-sections -fdata-sections --target=x86_64-pc-linux-elf -c enclave.c

    # see that the example worked
    $ llvm-build/bin/llvm-readobj --gaps-info enclave.o

    # link the example to produce an executable for each enclave
    $ llvm-build/bin/clang -fuse-ld=lld enclave.o -o enclave_alpha -Xlinker -enclave -Xlinker alpha
    $ llvm-build/bin/clang -fuse-ld=lld enclave.o -o enclave_beta  -Xlinker -enclave -Xlinker beta


Trivial Example: `enclave.c`
----------------------------

.. code-block:: c

    #include <stdio.h>

    #pragma pirate capability declare(red)
    #pragma pirate enclave declare(alpha)
    #pragma pirate enclave declare(beta)
    #pragma pirate enclave capability(alpha, red)

    void onalpha(void)
      __attribute__((pirate_enclave_only("alpha")))
      __attribute__((pirate_capability("red")))
    {
            printf("running on alpha\n");
    }

    void
    alphamain(void)
      __attribute__((pirate_enclave_main("alpha")))
    {
            onalpha();
            printf("alpha started\n");
    }

    void
    betamain(void)
      __attribute__((pirate_enclave_main("beta")))
    {
            printf("beta started\n");
    }

Configuring CMake
-----------------

To build a project with PIRATE LLVM set the ``CC`` and ``CXX`` to the PIRATE LLVM toolchain.
For example,

.. code-block:: sh

  CC=`realpath llvm-build/bin/clang`
  CXX=`realpath llvm-build/bin/clang++`

Alternatively, the CMake variables ``CMAKE_C_COMPILER`` and
``CMAKE_CXX_COMPILER`` can be defined accordingly.

Different enclaves can be generated by adding specific `link_options` as seen below.

.. code-block::

    cmake_minimum_required(VERSION 3.13)
    project(example)
    
    add_executable(alpha enclave.c)
    target_compile_options(alpha PRIVATE -fdata-sections -ffunction-sections)
    target_link_options(alpha PRIVATE -fuse-ld=lld -Wl,-enclave,alpha)
    
    add_executable(beta enclave.c)
    target_compile_options(beta PRIVATE -fdata-sections -ffunction-sections)
    target_link_options(beta PRIVATE -fuse-ld=lld -Wl,-enclave,beta)


The `-fuse-ld=lld` argument ensures that the PIRATE version of the LLVM linker will be used
to link the executable. This version has been updated to handle the annotations.

The `-Wl,-enclave,NAME` argument instructs the linker to select the code from the project
corresponding to the desired enclave.

The `-fdata-sections` and `-ffunction-sections` flags put each global variable and function
their own sections. This allows the linker to drop unused definitions from the final executable
which ensures their capability requirements will not need to be met when they are not
referenced from the enclave's entry point.



