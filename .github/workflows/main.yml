name: CI

on:
  push:
  release:
    type: [created]
jobs:
  # This task builds the HTML documentation using sphinx.
  docs:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Build documentation
      run: |
        pip3 install sphinx
        export PATH="$HOME/.local/bin:$PATH"
        sphinx-build -M html doc build/doc
    - name: Make artifact
      uses: actions/upload-artifact@v1
      with:
        name: doc
        path: build/doc
  # This is the main build repo
  build:
    strategy:
      fail-fast: false
      matrix:
        name: [runner, clang, clang-shmem, gcc, pirate-clang, centos7]
        include:
          - name: runner
            packager: apt-get
            extra-packages: clang
            cc: clang
            extra-cmake: -DGAPS_DISABLE=ON
            sudo: sudo
          - name: clang
            container: ubuntu:focal
            packager: apt-get
            extra-packages: clang wget ca-certificates cmake make git libc6-dev libssl-dev libjpeg-dev libx11-dev
            cc: clang
            extra-cmake: -DIPV6_TESTS=OFF -DGAPS_DISABLE=ON
            upload-artifact: true
          - name: clang-shmem
            container: ubuntu:focal
            packager: apt-get
            extra-packages: clang wget ca-certificates cmake make git libc6-dev libssl-dev libjpeg-dev libx11-dev
            cc: clang
            extra-cmake: -DIPV6_TESTS=OFF -DGAPS_DISABLE=ON -DPIRATE_SHMEM_FEATURE=ON
          - name: gcc
            container: ubuntu:focal
            packager: apt-get
            extra-packages: g++ wget ca-certificates cmake make git libc6-dev libssl-dev libjpeg-dev libx11-dev
            cc: gcc
            extra-cmake: -DIPV6_TESTS=OFF -DGAPS_DISABLE=ON
          - name: pirate-clang
            container: docker://pirateteam/llvm-ubuntu:latest
            packager: apt-get
            extra-packages: git libssl-dev libjpeg-dev libx11-dev
            cc: clang
            extra-cmake: -DIPV6_TESTS=OFF
          - name: centos7
            container: docker://pirateteam/llvm-centos7-x86_64
            packager: yum
            cc: clang
            extra-cmake: -DIPV6_TESTS=OFF -DOPENSSL_INCLUDE_DIR=/usr/include/openssl11 -DOPENSSL_CRYPTO_LIBRARY=/usr/lib64/libcrypto.so.1.1 -DOPENSSL_SSL_LIBRARY=/usr/lib64/libssl.so.1.1
    runs-on: ubuntu-20.04
    container: ${{matrix.container}}
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies via apt-get
      if: matrix.packager == 'apt-get'
      run: |
        ${{matrix.sudo}} apt-get update
        ${{matrix.sudo}} DEBIAN_FRONTEND=noninteractive TZ=UTC \
           apt-get install --no-install-recommends -y \
           ${{matrix.extra-packages}} \
           valgrind libyaml-dev libavcodec-dev libavformat-dev libavutil-dev libswscale-dev
    - name: Install dependencies via yum
      if: matrix.packager == 'yum'
      run: |
        # Install epel repo
        yum install -y epel-release
        # Install git, wget, libgcc and libstdc++
        yum install -y \
           git wget cmake3 \
           devtoolset-7-gcc devtoolset-7-libstdc++-devel \
           valgrind\
           libyaml-devel-0.1.4-11.el7_0.x86_64 \
           openssl11 openssl11-devel \
           libjpeg-devel libX11-devel
        echo "/opt/rh/devtoolset-7/root/bin" >> $GITHUB_PATH
        echo "/opt/rh/llvm-toolset-7/root/bin" >> $GITHUB_PATH
        mkdir -p /root/bin
        ln -s /usr/bin/cmake3 /root/bin/cmake
        ln -s /usr/bin/openssl11 /root/bin/openssl
        echo "/root/bin" >> $GITHUB_PATH
    - name: Build googletest
      run: |
        echo "$PATH"
        mkdir ~/googletest
        cd ~/googletest
        wget -qO - https://github.com/google/googletest/archive/release-1.10.0.tar.gz | tar -xz
        cmake -D CMAKE_INSTALL_PREFIX:PATH=$HOME/googletest -D CMAKE_BUILD_TYPE=Release googletest-release-1.10.0
        cmake --build . --target install
    # We can only install the Mercury loopback on the non-docker builds.
    - name: Build and install Mercury loopback
      if: matrix.name == 'runner'
      run: |
        cd devices/mercury/loopback_ilip
        make
        sudo insmod gaps_ilip.ko
        test -c /dev/gaps_ilip_0_root || exit 1
    - name: Build libpirate
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_C_COMPILER=${{matrix.cc}} \
              ${{matrix.extra-cmake}} \
              -DCMAKE_INSTALL_PREFIX=../dist/libpirate \
              -DGTEST_ROOT:PATH=$HOME/googletest \
              -DPIRATE_UNIT_TEST=ON \
              -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON  \
              -DPIRATE_LAUNCHER=OFF \
              -DPIRATE_GETOPT=OFF \
              ..
        make
        make install
    - name: Build Launcher
      run: |
        mkdir -p build-pal
        cd build-pal
        CFLAGS="-I$GITHUB_WORKSPACE/dist/libpirate/include" \
          LDFLAGS="-L$GITHUB_WORKSPACE/dist/libpirate/lib" \
          cmake -DCMAKE_C_COMPILER=${{matrix.cc}} \
                ${{matrix.extra-cmake}} \
                -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/dist/pal \
                ../pal
        make install
    - name: Build libpirategetopt
      run: |
        mkdir -p build-getopt
        cd build-getopt
        cmake -DCMAKE_C_COMPILER=${{matrix.cc}} \
              ${{matrix.extra-cmake}} \
              -DCMAKE_INSTALL_PREFIX=../dist/libpirategetopt \
              ../libpirategetopt
        make install
    - name: Make libpirate artifact
      uses: actions/upload-artifact@v1
      if: matrix.upload-artifact
      with:
        name: libpirate
        path: dist/libpirate
    - name: Make launcher artifact
      uses: actions/upload-artifact@v1
      if: matrix.upload-artifact
      with:
        name: pal
        path: dist/pal
    - name: Make libpirategetopt artifact
      uses: actions/upload-artifact@v1
      if: matrix.upload-artifact
      with:
        name: libpirategetopt
        path: dist/libpirategetopt
    - name: libpirate tests
      timeout-minutes: 5
      run: |
        cd build/libpirate
        ./gaps_channels_test
        make valgrind
    - name: build benchmarks
      run: |
        cd build
        cmake -DCMAKE_C_COMPILER=${{matrix.cc}} \
              ${{matrix.extra-cmake}} \
              -DGAPS_BENCH=ON \
              -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
        make
    - name: build demos
      run: |
        cd build
        cmake -DGAPS_DEMOS=ON \
              ${{matrix.extra-cmake}} \
              -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
        make
    - name: time_demo tests
      run: |
        cd build/demos/time_demo/test
        ./ts_test.sh
  windows-build:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - name: googletest
      shell: powershell
      run: |
        mkdir ~/googletest
        cd ~/googletest
        Invoke-WebRequest -Uri https://github.com/google/googletest/archive/release-1.10.0.tar.gz -MaximumRedirection 10 -OutFile release-1.10.0.tar.gz
        tar -x -z -f release-1.10.0.tar.gz
        cd googletest-release-1.10.0
        mkdir build
        cd build
        cmake ..
        cmake --build . --config Release --target install
    - name: build libpirate
      run: |
        mkdir build
        cd build
        cmake -DGTEST_LIBRARY="C:\\Program Files (x86)\\googletest-distribution\\lib\\gtest.lib" `
          -DGTEST_MAIN_LIBRARY="C:\\Program Files (x86)\\googletest-distribution\\lib\\gtest_main.lib" `
          -DGTEST_INCLUDE_DIR="C:\\Program Files (x86)\\googletest-distribution\\include" `
          -DGAPS_DISABLE=ON `
          -DPIRATE_UNIT_TEST=ON `
          -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON `
          -DPIRATE_LAUNCHER=OFF `
          -DPIRATE_GETOPT=OFF `
          ..
        cmake --build . --config Release
    - name: libpirate tests
      timeout-minutes: 5
      run: |
        cd build/libpirate/Release
        ./gaps_channels_test.exe
  # This assembles the docker images
  assemble-docker-images:
    runs-on: ubuntu-latest
    needs: [docs, build]
    steps:
    - uses: actions/checkout@v2
    - name: Get documentation
      uses: actions/download-artifact@v1
      with:
        name: doc
        path: images/ubuntu/doc
    - name: Get libpirate
      uses: actions/download-artifact@v1
      with:
        name: libpirate
        path: images/ubuntu/libpirate
    - name: Get libpirategetopt
      uses: actions/download-artifact@v1
      with:
        name: libpirategetopt
        path: images/ubuntu/libpirategetopt
    - name: Get PAL
      uses: actions/download-artifact@v1
      with:
        name: pal
        path: images/ubuntu/pal
    - name: Build pirateteam/ubuntu
      run: |
        cp -a demos images/ubuntu
        docker build -t pirateteam/ubuntu images/ubuntu
        docker save pirateteam/ubuntu | gzip > ubuntu-latest.tar.gz

    - name: Make pirateteam/ubuntu artifact
      uses: actions/upload-artifact@v1
      with:
        name: ubuntu-latest
        path: ubuntu-latest.tar.gz
    - name: Build demos on pirateteam/ubuntu
      run: |
        mkdir -p build
        # Run cmake
        docker run --mount type=bind,src=`pwd`/build,dst=/root/build \
                   -w /root/build \
                   pirateteam/ubuntu \
                   cmake ../pirate/demos
        # Run make
        docker run --mount type=bind,src=`pwd`/build,dst=/root/build \
                   -w /root/build \
                   pirateteam/ubuntu \
                   make
    - name: Post docker images
      run: |
        echo ${{ secrets.docker_password }} | docker login -u gapspirateteam --password-stdin
        docker push pirateteam/ubuntu:${{ github.event.release.tag_name }}
      if: github.event_name == 'release'
  # This builds the IDL tool
  antlr-idl:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      run: |
        sudo sed -i 's/azure.archive.ubuntu.com/us.archive.ubuntu.com/g' /etc/apt/sources.list
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y clang valgrind libyaml-dev uuid-dev default-jre-headless
    - name: googletest
      run: |
        mkdir ~/googletest
        cd ~/googletest
        wget -qO - https://github.com/google/googletest/archive/release-1.10.0.tar.gz | tar -xz
        cmake -D CMAKE_INSTALL_PREFIX:PATH=$HOME/googletest -D CMAKE_BUILD_TYPE=Release googletest-release-1.10.0
        cmake --build . --target install
    - name: Cache antlr4 runtime
      id: cache-antlr4-runtime
      uses: actions/cache@v2
      env:
        cache-name: cache-antlr4.8-runtime
      with:
        path: ~/antlr4
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Build antlr4 runtime
      if: steps.cache-antlr4-runtime.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/antlr4
        cd ~/antlr4
        wget -qO - https://www.antlr.org/download/antlr-4.8-complete.jar > antlr-4.8-complete.jar
        wget -qO - https://www.antlr.org/download/antlr4-cpp-runtime-4.8-source.zip > antlr4-cpp-runtime-4.8-source.zip
        unzip antlr4-cpp-runtime-4.8-source.zip
        mkdir build
        cd build
        cmake -D ANTLR4_INSTALL=1 ..
        make
    - name: Install antlr4 runtime
      run: |
        cd ~/antlr4/build
        sudo make install
        cd ..
    - name: Build idl
      run: |
        cd antlr
        mkdir -p build
        cd build
        cmake -DGTEST_ROOT:PATH=$HOME/googletest \
              -DPIRATE_UNIT_TEST=ON \
              -DANTLR4_MODULE_PATH=/usr/local/lib/cmake/antlr4 \
              -DANTLR4_JAR_LOCATION=$HOME/antlr4/antlr-4.8-complete.jar \
              -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
              ..
        make
        ./idl_test
        make valgrind
  # This builds the VSCode plugins
  vscode-plugins:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install npm
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y npm
    - name: Install vsce
      run: sudo npm install -g --no-optional vsce
    - name: Install dependencies
      working-directory: vscode-plugins/architecture
      run: npm install
    - name: Package extension
      working-directory: vscode-plugins/architecture
      run: vsce package
