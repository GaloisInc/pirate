name: CI

on:
  push:
  release:
    type: [created]
jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build documentation
      run: |
        pip3 install sphinx
        export PATH="$HOME/.local/bin:$PATH"
        sphinx-build -M html doc build/doc
    - name: Make artifact
      uses: actions/upload-artifact@v1
      with:
        name: doc
        path: build/doc
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: update apt sources
      run: |
        sudo sed -i 's/azure.archive.ubuntu.com/us.archive.ubuntu.com/g' /etc/apt/sources.list
    - name: install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y clang valgrind libyaml-dev
    - name: googletest
      run: |
        mkdir ~/googletest
        cd ~/googletest
        wget -qO - https://github.com/google/googletest/archive/release-1.10.0.tar.gz | tar -xz
        cmake -D CMAKE_INSTALL_PREFIX:PATH=$HOME/googletest -D CMAKE_BUILD_TYPE=Release googletest-release-1.10.0
        cmake --build . --target install
    - name: build Mercury loopback
      run: |
        cd devices/mercury/loopback_ilip
        make
        sudo insmod gaps_ilip.ko
        test -c /dev/gaps_ilip_0_root || exit 1
    - name: build libpirate
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=../dist/libpirate \
              -DGTEST_ROOT:PATH=$HOME/googletest \
              -DGAPS_DISABLE=ON \
              -DPIRATE_UNIT_TEST=ON \
              -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON  \
              -DBUILD_LAUNCHER=OFF \
              -DBUILD_RESOURCE_LOADER=OFF \
              ..
        make
        make install
    - name: Make libpirate artifact
      uses: actions/upload-artifact@v1
      with:
        name: libpirate
        path: dist/libpirate
    - name: Build Launcher
      run: |
        mkdir -p build-pal
        cd build-pal
        CFLAGS="-I$GITHUB_WORKSPACE/dist/libpirate/include" \
          LDFLAGS="-L$GITHUB_WORKSPACE/dist/libpirate/lib" \
          cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/dist/pal ../pal
        make install
    - name: Make launcher artifact
      uses: actions/upload-artifact@v1
      with:
        name: pal
        path: dist/pal
    - name: Build libpirategetopt
      run: |
        mkdir -p build-getopt
        cd build-getopt
        cmake -DCMAKE_INSTALL_PREFIX=../dist/libpirategetopt ../libpirategetopt
        make install
    - name: Make libpirategetopt artifact
      uses: actions/upload-artifact@v1
      with:
        name: libpirategetopt
        path: dist/libpirategetopt
    - name: libpirate tests
      timeout-minutes: 5
      run: |
        cd build/libpirate
        ./gaps_channels_test
        make valgrind valgrind-cxx
    - name: build benchmarks
      run: |
        cd build
        cmake -DGAPS_BENCH=ON -DGAPS_DISABLE=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
        make
    - name: build demos
      run: |
        cd build
        cmake -DGAPS_DEMOS=ON -DGAPS_DISABLE=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
        make
    - name: time_demo tests
      run: |
        cd build/demos/time_demo/test
        ./ts_test.sh
  shmem:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: update apt sources
      run: |
        sudo sed -i 's/azure.archive.ubuntu.com/us.archive.ubuntu.com/g' /etc/apt/sources.list
    - name: install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y clang valgrind
    - name: googletest
      run: |
        mkdir ~/googletest
        cd ~/googletest
        wget -qO - https://github.com/google/googletest/archive/release-1.10.0.tar.gz | tar -xz
        cmake -D CMAKE_INSTALL_PREFIX:PATH=$HOME/googletest \
              -D CMAKE_BUILD_TYPE=Release \
              googletest-release-1.10.0
        cmake --build . --target install
    - name: build Mercury loopback
      run: |
        cd devices/mercury/loopback_ilip
        make
        sudo insmod gaps_ilip.ko
        test -c /dev/gaps_ilip_0_root || exit 1
    - name: build libpirate
      run: |
        mkdir -p build
        cd build
        cmake -DGTEST_ROOT:PATH=$HOME/googletest \
              -DPIRATE_UNIT_TEST=ON \
              -DGAPS_DISABLE=ON \
              -DPIRATE_SHMEM_FEATURE=ON \
              -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
              -DBUILD_LAUNCHER=OFF \
              -DBUILD_RESOURCE_LOADER=OFF \
              ..
        make
    - name: libpirate tests
      timeout-minutes: 5
      run: |
        cd build/libpirate
        ./gaps_channels_test
        make valgrind valgrind-cxx
  gcc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: build libpirate
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_C_COMPILER="gcc" \
              -DGAPS_DISABLE=ON \
              -DBUILD_LAUNCHER=OFF \
              -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
        make
    - name: build benchmarks
      run: |
        cd build
        cmake -DCMAKE_C_COMPILER="gcc" -DGAPS_DISABLE=ON -DGAPS_BENCH=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
        make
    - name: build demos
      run: |
        cd build
        cmake -DCMAKE_C_COMPILER="gcc" -DGAPS_DISABLE=ON -DGAPS_DEMOS=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
        make
  # This makes sure we can build the GAPS test on the image
  gaps:
    runs-on: ubuntu-latest
    container: docker://pirateteam/llvm-ubuntu:latest
    steps:
    - uses: actions/checkout@v2
    - name: update apt sources
      run: |
        sed -i 's/azure.archive.ubuntu.com/us.archive.ubuntu.com/g' /etc/apt/sources.list
    - name: install dependencies
      run: |
        apt-get update
        apt-get install --no-install-recommends -y git libjpeg-dev libssl-dev libx11-dev libyaml-dev
    - name: googletest
      run: |
        mkdir ~/googletest
        cd ~/googletest
        wget -qO - https://github.com/google/googletest/archive/release-1.10.0.tar.gz | tar -xz
        cmake -D CMAKE_INSTALL_PREFIX:PATH=$HOME/googletest -D CMAKE_BUILD_TYPE=Release googletest-release-1.10.0
        cmake --build . --target install
    - name: build libpirate
      run: |
        mkdir -p build
        cd build
        cmake -DGTEST_ROOT:PATH=$HOME/googletest \
              -DPIRATE_UNIT_TEST=ON \
              -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
              ..
        make
    - name: libpirate tests
      timeout-minutes: 5
      run: |
        cd build/libpirate
        ./gaps_channels_test
        make valgrind valgrind-cxx
    - name: Build demos
      run: |
        cd build
        cmake -DGAPS_DEMOS=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
        make
    - name: time_demo tests
      run: |
        cd build/demos/time_demo/test
        ./ts_test.sh
  # This builds the docker image
  docker-build:
    runs-on: ubuntu-latest
    needs: [docs, build]
    steps:
    - uses: actions/checkout@v2
    - name: Get documentation
      uses: actions/download-artifact@v1
      with:
        name: doc
        path: images/ubuntu/doc
    - name: Get libpirate
      uses: actions/download-artifact@v1
      with:
        name: libpirate
        path: images/ubuntu/libpirate
    - name: Get libpirategetopt
      uses: actions/download-artifact@v1
      with:
        name: libpirategetopt
        path: images/ubuntu/libpirategetopt
    - name: Get PAL
      uses: actions/download-artifact@v1
      with:
        name: pal
        path: images/ubuntu/pal
    - name: Build pirateteam/ubuntu
      run: |
        cp -a demos images/ubuntu
        docker build -t pirateteam/ubuntu images/ubuntu
        docker save pirateteam/ubuntu | gzip > ubuntu-latest.tar.gz
    - name: Make pirateteam/ubuntu artifact
      uses: actions/upload-artifact@v1
      with:
        name: ubuntu-latest
        path: ubuntu-latest.tar.gz
    - name: Build demos on pirateteam/ubuntu
      run: |
        mkdir -p build
        docker run --mount type=bind,src=`pwd`/build,dst=/root/build \
                   -w /root/build \
                   pirateteam/ubuntu \
                   cmake ../pirate/demos
        docker run --mount type=bind,src=`pwd`/build,dst=/root/build \
                   -w /root/build \
                   pirateteam/ubuntu \
                   make
    - name: Post docker images
      run: |
        echo ${{ secrets.docker_password }} | docker login -u gapspirateteam --password-stdin
        docker push pirateteam/ubuntu:${{ github.event.release.tag_name }}
      if: github.event_name == 'release'
