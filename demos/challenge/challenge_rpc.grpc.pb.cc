// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: challenge_rpc.proto

#include "challenge_rpc.pb.h"
#include "challenge_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Encrypt1_method_names[] = {
  "/Encrypt1/Encrypt",
};

std::unique_ptr< Encrypt1::Stub> Encrypt1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Encrypt1::Stub> stub(new Encrypt1::Stub(channel));
  return stub;
}

Encrypt1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Encrypt_(Encrypt1_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Encrypt1::Stub::Encrypt(::grpc::ClientContext* context, const ::google::protobuf::BytesValue& request, ::google::protobuf::BytesValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Encrypt_, context, request, response);
}

void Encrypt1::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::google::protobuf::BytesValue* request, ::google::protobuf::BytesValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, std::move(f));
}

void Encrypt1::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::BytesValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, std::move(f));
}

void Encrypt1::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::google::protobuf::BytesValue* request, ::google::protobuf::BytesValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, reactor);
}

void Encrypt1::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::BytesValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BytesValue>* Encrypt1::Stub::AsyncEncryptRaw(::grpc::ClientContext* context, const ::google::protobuf::BytesValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::BytesValue>::Create(channel_.get(), cq, rpcmethod_Encrypt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BytesValue>* Encrypt1::Stub::PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::google::protobuf::BytesValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::BytesValue>::Create(channel_.get(), cq, rpcmethod_Encrypt_, context, request, false);
}

Encrypt1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Encrypt1_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Encrypt1::Service, ::google::protobuf::BytesValue, ::google::protobuf::BytesValue>(
          [](Encrypt1::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::BytesValue* req,
             ::google::protobuf::BytesValue* resp) {
               return service->Encrypt(ctx, req, resp);
             }, this)));
}

Encrypt1::Service::~Service() {
}

::grpc::Status Encrypt1::Service::Encrypt(::grpc::ServerContext* context, const ::google::protobuf::BytesValue* request, ::google::protobuf::BytesValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Encrypt2_method_names[] = {
  "/Encrypt2/Encrypt",
};

std::unique_ptr< Encrypt2::Stub> Encrypt2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Encrypt2::Stub> stub(new Encrypt2::Stub(channel));
  return stub;
}

Encrypt2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Encrypt_(Encrypt2_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Encrypt2::Stub::Encrypt(::grpc::ClientContext* context, const ::google::protobuf::BytesValue& request, ::google::protobuf::BytesValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Encrypt_, context, request, response);
}

void Encrypt2::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::google::protobuf::BytesValue* request, ::google::protobuf::BytesValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, std::move(f));
}

void Encrypt2::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::BytesValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, std::move(f));
}

void Encrypt2::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::google::protobuf::BytesValue* request, ::google::protobuf::BytesValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, reactor);
}

void Encrypt2::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::BytesValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BytesValue>* Encrypt2::Stub::AsyncEncryptRaw(::grpc::ClientContext* context, const ::google::protobuf::BytesValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::BytesValue>::Create(channel_.get(), cq, rpcmethod_Encrypt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BytesValue>* Encrypt2::Stub::PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::google::protobuf::BytesValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::BytesValue>::Create(channel_.get(), cq, rpcmethod_Encrypt_, context, request, false);
}

Encrypt2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Encrypt2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Encrypt2::Service, ::google::protobuf::BytesValue, ::google::protobuf::BytesValue>(
          [](Encrypt2::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::BytesValue* req,
             ::google::protobuf::BytesValue* resp) {
               return service->Encrypt(ctx, req, resp);
             }, this)));
}

Encrypt2::Service::~Service() {
}

::grpc::Status Encrypt2::Service::Encrypt(::grpc::ServerContext* context, const ::google::protobuf::BytesValue* request, ::google::protobuf::BytesValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


